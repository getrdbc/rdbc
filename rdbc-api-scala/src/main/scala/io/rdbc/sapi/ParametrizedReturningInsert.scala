/*
 * Copyright 2016 Krzysztof Pado
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.rdbc.sapi

import java.util.UUID

import scala.concurrent.Future
import scala.concurrent.duration.FiniteDuration

/** Represents a parametized insert statement that can return keys generated by a database engine.
  *
  * Parametrized statement is a statement that has all parameters provided and is ready to be executed.
  *
  * @define timeoutInfo
  *  After the operation takes longer time than `timeout`, operation will be aborted. Note however, that it may not
  *  be feasible to abort the operation immediately.
  * @define baseExceptions
  *  Returned future can fail with:
  *  - [[io.rdbc.api.exceptions.StmtExecutionException.UnauthorizedException UnauthorizedException]] when client is not authorized to perform the action
  *  - [[io.rdbc.api.exceptions.StmtExecutionException.InvalidQueryException InvalidQueryException]] when query is rejected by a database engine as invalid
  *  - [[io.rdbc.api.exceptions.StmtExecutionException.InactiveTxException InactiveTxException]] when transaction is in progress but is in inactive state
  *  - [[io.rdbc.api.exceptions.StmtExecutionException.ConstraintViolationException ConstraintViolationException]] when operation results in an integrity constraint violation
  *  - [[io.rdbc.api.exceptions.StmtExecutionException.UncategorizedExecutionException UncategorizedExecutionException]] when a general statement execution error occurs
  * @define keyExceptions
  *  - [[io.rdbc.api.exceptions.NoKeysReturnedException NoKeysReturnedException]] - when no keys were returned by the database engine
  *  - [[io.rdbc.api.exceptions.NoSuitableConverterFoundException NoSuitableConverterFoundException]] - when no suitable converter was found to transform key value to desired class instance
  */
trait ParametrizedReturningInsert extends ParametrizedInsert {

  /** Executes an insert statement and returns generated key rows as a [[ResultStream]] instance that can be used to stream
    * rows from the database leveraging Reactive Streams specification's `Publisher` with backpressure.
    *
    * $timeoutInfo
    * $baseExceptions
    */
  def executeForKeysStream()(implicit timeout: FiniteDuration): Future[ResultStream]

  /** Executes an insert statement and returns generated key rows as a [[ResultSet]] instance.
    *
    * After execution all resulting rows will be pulled from a database and buffered in the resulting object.
    * If expected result set is very big this may cause out of memory errors.
    *
    * $timeoutInfo
    * $baseExceptions
    */
  def executeForKeysSet()(implicit timeout: FiniteDuration): Future[ResultSet]

  /** Executes an insert statement and returns a single generated key.
    *
    * $timeoutInfo
    * $baseExceptions
    * $keyExceptions
    *
    * @tparam K type of the returned key
    */
  def executeForKey[K](cls: Class[K])(implicit timeout: FiniteDuration): Future[K] //TODO can cls parameter be replaced by a class tag?

  /** Executes an insert statement and returns a single generated Int key.
    *
    * This method is a shortcut for calling {{{ executeForKey(classOf[Int])}}}
    *
    * $timeoutInfo
    * $baseExceptions
    * $keyExceptions
    */
  def executeForIntKey()(implicit timeout: FiniteDuration): Future[Int]

  /** Executes an insert statement and returns a single generated Long key.
    *
    * This method is a shortcut for calling {{{ executeForKey(classOf[Long])}}}
    *
    * $timeoutInfo
    * $baseExceptions
    * $keyExceptions
    */
  def executeForLongKey()(implicit timeout: FiniteDuration): Future[Long]

  /** Executes an insert statement and returns a single generated UUID key.
    *
    * This method is a shortcut for calling {{{ executeForKey(classOf[UUID])}}}
    *
    * $timeoutInfo
    * $baseExceptions
    * $keyExceptions
    */
  def executeForUUIDKey()(implicit timeout: FiniteDuration): Future[UUID]
}
