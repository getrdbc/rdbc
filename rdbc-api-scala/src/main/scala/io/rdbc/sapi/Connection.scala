package io.rdbc.sapi

import org.reactivestreams.Publisher

import scala.concurrent.duration.FiniteDuration
import scala.concurrent.{ExecutionContext, Future}

/** Represents a database connection (session).
  *
  * Instances of implementations of this trait can be obtained using a [[ConnectionFactory]]. When clients are done
  * with the connection, they are required to call a `release` method co clean up resources such as open sockets.
  *
  * Invoking any method of this trait when any previous operation has not completed yet is not allowed. Operation is
  * considered complete when a resulting [[scala.concurrent.Future Future]] completes.
  *
  * Transaction management has to be done using `beginTx`, `commitTx` and `rollbackTx` methods. Using SQL statements to
  * manage transaction state is not allowed.
  *
  * SQL statements passed as this class method arguments can be parametrized using a following syntax:
  * Parameters are named. Parameter is comprised of an alphanumeric name prefixed with a colon. One parameter can
  * occur multiple times in one statement. Examples of valid statements are listed below:
  *  - `select * from users where login = :login`
  *  - `select * from users where login = :query or given_name = :query`
  *
  * @define timeoutInfo
  *  After the operation takes longer time than `timeout`, operation will be aborted. Note however, that it may not
  *  be feasible to abort the operation immediately.
  * @define statementExceptions
  *  Returned future can fail with:
  *  - [[io.rdbc.api.exceptions.ParseException#SyntaxErrorException SyntaxErrorException]] - when statement is not syntactically correct
  *  - [[io.rdbc.api.exceptions.ParseException#UncategorizedParseException UncategorizedParseException]] - when general error occurs
  * @define timeoutException
  *  - [[io.rdbc.api.exceptions.TimeoutException TimeoutException]] - when maximum operation time has been exceeded
  * @define statementParametrization
  *  For syntax of statement parametrization see a [[Connection]] documentation.
  * @define returningInsert
  *  Returns a [[ReturningInsert]] instance bound to this connection that represents a SQL insert statement that
  *  can return keys generated by the database engine.
  *
  *  It is not defined whether the method returns exceptionally if SQL provided is a valid statement,
  *  but not an insert statement.
  */
trait Connection {

  /** Begins a database transaction.
    *
    * Using this method is a preferred way of starting a transaction, using SQL statements to manage transaction
    * state may lead to undefined behavior.
    *
    * $timeoutInfo
    *
    * Returned future can fail with:
    *  - [[io.rdbc.api.exceptions.BeginTxException BeginTxException]] - when general error occurs
    * $timeoutException
    */
  def beginTx()(implicit timeout: FiniteDuration): Future[Unit]

  /** Commits a database transaction.
    *
    * Using this method is a preferred way of committing a transaction, using SQL statements to manage transaction
    * state may lead to undefined behavior.
    *
    * $timeoutInfo
    *
    * Returned future can fail with:
    *  - [[io.rdbc.api.exceptions.BeginTxException CommmitTxException]] - when general error occurs
    * $timeoutException
    */
  def commitTx()(implicit timeout: FiniteDuration): Future[Unit]

  /** Rolls back a database transaction.
    *
    * Using this method is a preferred way of rolling back a transaction, using SQL statements to manage transaction
    * state may lead to undefined behavior.
    *
    * $timeoutInfo
    *
    * Returned future can fail with:
    *  - [[io.rdbc.api.exceptions.BeginTxException RollbackTxException]] - when general error occurs
    * $timeoutException
    */
  def rollbackTx()(implicit timeout: FiniteDuration): Future[Unit]

  /** Releases the connection and underlying resources.
    *
    * After calling this method no future operations on the instance are allowed.
    *
    * Returned future can fail with:
    *  - [[io.rdbc.api.exceptions.ConnectionReleaseException ConnectionReleaseException]] - when general error occurs
    */
  def release(): Future[Unit]

  /** Checks whether the connection is still usable.
    *
    * @return Future of `true` iff connection is usable, `false` otherwise
    */
  def validate(): Future[Boolean]

  /** Returns a [[Select]] instance bound to this connection that represents a SQL select statement.
    *
    * It is not defined whether the method returns exceptionally if SQL provided is a valid statement,
    * but not a select statement.
    *
    * $statementParametrization
    *
    * $statementExceptions
    */
  def select(sql: String): Future[Select]

  /** Returns an [[Update]] instance bound to this connection that represents a SQL update statement.
    *
    * It is not defined whether the method returns exceptionally if SQL provided is a valid statement,
    * but not an update statement.
    *
    * $statementParametrization
    *
    * $statementExceptions
    */
  def update(sql: String): Future[Update]

  /** Returns an [[Insert]] instance bound to this connection that represents a SQL insert statement.
    *
    * It is not defined whether the method returns exceptionally if SQL provided is a valid statement,
    * but not an insert statement.
    *
    * $statementParametrization
    *
    * $statementExceptions
    */
  def insert(sql: String): Future[Insert]

  /** $returningInsert
    *
    * $statementParametrization
    *
    * $statementExceptions
    */
  def returningInsert(sql: String): Future[ReturningInsert]

  /** $returningInsert
    *
    * `keyColumns` parameter is used to list column names that database engine generates keys for. Only keys from these
    * columns will be returned to the client. This method is a more efficient version of `returningInsert(sql: String)`
    * method that returns all keys generated by the database engine.
    *
    * $statementParametrization
    *
    * $statementExceptions
    */
  def returningInsert(sql: String, keyColumns: String*): Future[ReturningInsert]

  /** Returns a [[Delete]] instance bound to this connection that represents a SQL delete statement.
    *
    * It is not defined whether the method returns exceptionally if SQL provided is a valid statement,
    * but not a delete statement.
    *
    * $statementParametrization
    *
    * $statementExceptions
    */
  def delete(sql: String): Future[Delete]

  /** Returns a [[Statement]] instance bound to this connection that represents any SQL statement.
    *
    * Clients are encouraged to use `select`, `insert`, `update`, `delete` methods in favor of this generic method.
    *
    * $statementParametrization
    *
    * $statementExceptions
    */
  def statement(sql: String): Future[Statement]

  /** Efficiently inserts values to a single database table.
    *
    * Many database engines provide an efficient way of inserting data to the single database table. This method is
    * intended to leverage this special database engine's feature.
    *
    * `sql` provided by the client has to be an insert statement that does not depend on any subqueries and the only
    * values that are inserted must be provided in the statement parameters.
    *
    * $statementParametrization
    *
    * Parameters are provided via a reactive streams specification `Publisher`. Each published element is a map containing
    * all arguments that the insert statement requires.
    *
    * @todo describe exceptions
    */
  def streamIntoTable(sql: String, paramsPublisher: Publisher[Map[String, Any]]): Future[Unit]
}
